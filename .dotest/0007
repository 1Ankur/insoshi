From 60fc3ebc57b09f0c9b6d381194ade49b9bd310ab Mon Sep 17 00:00:00 2001
From: Piotr Jakubowski <piotrj@piotr-jakubowskis-macbook.local>
Date: Fri, 13 Jun 2008 00:09:29 +0200
Subject: Photos modified to work with galleries

---
 app/controllers/galleries_controller.rb            |    3 +
 app/controllers/photos_controller.rb               |   49 +++-
 app/models/activity.rb                             |    2 +-
 app/models/blog.rb                                 |    2 +-
 app/models/blog_post.rb                            |    2 +-
 app/models/comment.rb                              |    2 +-
 app/models/communication.rb                        |    2 +-
 app/models/connection.rb                           |    2 +-
 app/models/email_verification.rb                   |    2 +-
 app/models/feed.rb                                 |    2 +-
 app/models/forum.rb                                |    2 +-
 app/models/forum_post.rb                           |    2 +-
 app/models/gallery.rb                              |   17 +-
 app/models/message.rb                              |    2 +-
 app/models/page_view.rb                            |    2 +-
 app/models/person.rb                               |   10 +-
 app/models/photo.rb                                |   16 +-
 app/models/post.rb                                 |    2 +-
 app/models/preference.rb                           |    2 +-
 app/models/topic.rb                                |    2 +-
 app/views/galleries/_photo.html.erb                |    1 +
 app/views/galleries/show.html.erb                  |   30 ++-
 app/views/people/edit.html.erb                     |   39 +---
 app/views/photos/index.html.erb                    |    7 -
 app/views/photos/new.html.erb                      |    6 +-
 app/views/photos/show.html.erb                     |   27 ++
 db/migrate/026_add_gallery_to_photos.rb            |    4 +
 db/migrate/027_modify_person_primary_photo.rb      |    9 +
 db/migrate/028_add_list_capabilityto_photos.rb     |    9 +
 spec/controllers/photos_controller_spec.rb         |   18 +-
 spec/models/photo_spec.rb                          |   18 +-
 vendor/plugins/acts_as_list/README                 |   23 ++
 vendor/plugins/acts_as_list/init.rb                |    3 +
 .../acts_as_list/lib/active_record/acts/list.rb    |  256 +++++++++++++++
 vendor/plugins/acts_as_list/test/list_test.rb      |  332 ++++++++++++++++++++
 35 files changed, 809 insertions(+), 98 deletions(-)
 create mode 100644 app/views/galleries/_photo.html.erb
 delete mode 100644 app/views/photos/index.html.erb
 create mode 100644 app/views/photos/show.html.erb
 create mode 100644 db/migrate/027_modify_person_primary_photo.rb
 create mode 100644 db/migrate/028_add_list_capabilityto_photos.rb
 create mode 100644 vendor/plugins/acts_as_list/README
 create mode 100644 vendor/plugins/acts_as_list/init.rb
 create mode 100644 vendor/plugins/acts_as_list/lib/active_record/acts/list.rb
 create mode 100644 vendor/plugins/acts_as_list/test/list_test.rb

diff --git a/app/controllers/galleries_controller.rb b/app/controllers/galleries_controller.rb
index df4ca23b5e44956628c00a51cd41d87e329ef449..a71cfa5a843193feadefbe6f8f9119fbc218480f 100644
--- a/app/controllers/galleries_controller.rb
+++ b/app/controllers/galleries_controller.rb
@@ -4,7 +4,10 @@ class GalleriesController < ApplicationController
   
   def show
     @body = "galleries"
+    @gallery = Gallery.find(params[:id])
+    @photos = @gallery.photos.paginate :page => params[:page] 
   end
+  
   def index
     @body = "galleries"
     @person = Person.find(params[:person_id])
diff --git a/app/controllers/photos_controller.rb b/app/controllers/photos_controller.rb
index 5f63c15e2d622429e75bcdf8b61c2e2b1bb438c5..6a14dcc4be4620113d00aa567ea4a655cbe676e0 100644
--- a/app/controllers/photos_controller.rb
+++ b/app/controllers/photos_controller.rb
@@ -2,18 +2,24 @@ class PhotosController < ApplicationController
 
   before_filter :login_required
   before_filter :correct_user_required, :only => [ :edit, :update, :destroy ]
+  before_filter :correct_gallery_requried, :only => [:new, :create]
   
-  def index
-    @photos = current_person.photos
+  # def index
+  #   @photos = current_person.photos
+  # 
+  #   respond_to do |format|
+  #     format.html
+  #   end
+  # end
   
-    respond_to do |format|
-      format.html
-    end
+  def show
+    @photo = Photo.find(params[:id])
   end
 
+  
   def new
     @photo = Photo.new
-
+    @gallery = Gallery.find(params[:gallery_id])
     respond_to do |format|
       format.html
     end
@@ -35,14 +41,22 @@ class PhotosController < ApplicationController
     if params[:commit] == "Cancel"
       redirect_to edit_person_url(current_person) and return
     end
-    person_data = { :person => current_person,
-                    :primary => current_person.photos.empty? }
-    @photo = Photo.new(params[:photo].merge(person_data))
-  
+    
+    @gallery = Gallery.find(params[:gallery_id])
+    photo_data = { :person => current_person,
+                    :gallery => @gallery}
+    @photo = Photo.new(params[:photo].merge(photo_data))
+    # @photo.person_id = current_person;
+
+    # @photo = Photo.new(params[:photo])
+    # @photo.gallery_id = @gallery
+    # @photo.person_id = current_person
+    # person_data = { :person => current_person }
+    # @photo = Photo.new(params[:photo].merge(person_data))
     respond_to do |format|
       if @photo.save
         flash[:success] = "Photo successfully uploaded"
-        format.html { redirect_to(edit_person_path(current_person)) }
+        format.html { redirect_to(gallery_path(@photo.gallery)) }
       else
         format.html { render :action => "new" }
       end
@@ -96,5 +110,18 @@ class PhotosController < ApplicationController
         redirect_to home_url
       end
     end
+    
+    def correct_gallery_requried
+      if params[:gallery_id].nil?
+        flash[:error] = "You cannot add photo without specifying gallery"
+        redirect_to home_path()
+      else
+        @gallery = Gallery.find(params[:gallery_id])
+        if @gallery.person != current_person
+          flash[:error] = "You cannot add photos to this gallery"
+          redirect_to gallery_path(@gallery)
+        end
+      end
+    end
 end
 
diff --git a/app/models/activity.rb b/app/models/activity.rb
index 14c4c2e9c95b21d90d4f02f027a8d21831528c06..5f09ca296468ec0ff1bb224d7565aace568c4430 100644
--- a/app/models/activity.rb
+++ b/app/models/activity.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: activities
 #
diff --git a/app/models/blog.rb b/app/models/blog.rb
index de649cc65fff594490c3b935a149e35ab6a56064..0ad4581505a8ac4d0412676d931923b079e79351 100644
--- a/app/models/blog.rb
+++ b/app/models/blog.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: blogs
 #
diff --git a/app/models/blog_post.rb b/app/models/blog_post.rb
index 9c66c7563ca62a37d6c07348044546473b300399..c6aa7308a610216c2d33e2441e375cd64d06bbaf 100644
--- a/app/models/blog_post.rb
+++ b/app/models/blog_post.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: posts
 #
diff --git a/app/models/comment.rb b/app/models/comment.rb
index 12620d9e82ca6004985f22bc09d6e2048df1b8f9..8effbff240af2e7b6e655b759c34648023e29398 100644
--- a/app/models/comment.rb
+++ b/app/models/comment.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: comments
 #
diff --git a/app/models/communication.rb b/app/models/communication.rb
index c0dd2d634d6727fa28ac330611c714f0d8554b19..2f48c91b295b484f3536223cac758803dfc1d973 100644
--- a/app/models/communication.rb
+++ b/app/models/communication.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: communications
 #
diff --git a/app/models/connection.rb b/app/models/connection.rb
index 1f188c826524274fc8712bd50fa695ee89f8afb2..e24a6529a29222df5e8f9eb0c48815249a4dfa41 100644
--- a/app/models/connection.rb
+++ b/app/models/connection.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: connections
 #
diff --git a/app/models/email_verification.rb b/app/models/email_verification.rb
index 7fc224040660ea3252b74dc39cc6bacf78d98f76..28aacbbb5573a991a91c18e0d7baca5e10c2f2d8 100644
--- a/app/models/email_verification.rb
+++ b/app/models/email_verification.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: email_verifications
 #
diff --git a/app/models/feed.rb b/app/models/feed.rb
index 1f36cbe58c6732b13a7dbce5150f203b650a94de..bdb2a5be9c6c24abdcb2f9eb0104999ce0e0524f 100644
--- a/app/models/feed.rb
+++ b/app/models/feed.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: feeds
 #
diff --git a/app/models/forum.rb b/app/models/forum.rb
index dac414b384619d84178d8c366de530b44fb25d97..69ca89e7d00fef4daf39d1a7e773eec5fb5935d3 100644
--- a/app/models/forum.rb
+++ b/app/models/forum.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: forums
 #
diff --git a/app/models/forum_post.rb b/app/models/forum_post.rb
index df32349264b4ec238db04c3575dad6b7c8a1b4f0..647ad2aab29bac749618791ab0597d9aac810939 100644
--- a/app/models/forum_post.rb
+++ b/app/models/forum_post.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: posts
 #
diff --git a/app/models/gallery.rb b/app/models/gallery.rb
index dc6c00ffaedfb5372adcab61aeaa6e5e539f60a3..02fe3067a9af0793fa00dca3d147913b7e66cc82 100644
--- a/app/models/gallery.rb
+++ b/app/models/gallery.rb
@@ -1,7 +1,22 @@
+# == Schema Information
+# Schema version: 28
+#
+# Table name: galleries
+#
+#  id               :integer(11)     not null, primary key
+#  person_id        :integer(11)     
+#  title            :string(255)     
+#  description      :string(255)     
+#  photos_count     :integer(11)     default(0), not null
+#  primary_photo_id :integer(11)     
+#  created_at       :datetime        
+#  updated_at       :datetime        
+#
+
 class Gallery < ActiveRecord::Base
   include ActivityLogger
   belongs_to :person
-  has_many :photos, :dependent => :destroy
+  has_many :photos, :dependent => :destroy, :order => :position
   has_many :activities, :foreign_key => "item_id", :dependent => :destroy
   
 
diff --git a/app/models/message.rb b/app/models/message.rb
index ea737d8c13aeeabc95f02b0b27434dd981fa0cc3..87b3d9cc2c9258e0be283c87d605bf92d75111a6 100644
--- a/app/models/message.rb
+++ b/app/models/message.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: communications
 #
diff --git a/app/models/page_view.rb b/app/models/page_view.rb
index fb0ec976c243747f4d134f922e970f8c143f6464..74fac19b3236a29eadc985bec83bb92bf3662291 100644
--- a/app/models/page_view.rb
+++ b/app/models/page_view.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: page_views
 #
diff --git a/app/models/person.rb b/app/models/person.rb
index b6d096957cc3f0a24a8e0a33f5c8fb4b87e5911d..c4cb18d05f552aeeeaea5a0b59d1b88f767ef426 100644
--- a/app/models/person.rb
+++ b/app/models/person.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: people
 #
@@ -24,6 +24,7 @@
 #  wall_comment_notifications :boolean(1)      default(TRUE)
 #  blog_comment_notifications :boolean(1)      default(TRUE)
 #  email_verified             :boolean(1)      
+#  avatar_id                  :integer(11)     
 #
 
 class Person < ActiveRecord::Base
@@ -229,8 +230,11 @@ class Person < ActiveRecord::Base
   ## Photo helpers
 
   def photo
-    # This should only have one entry, but be paranoid.
-    photos.find_all_by_primary(true).first
+    if avatar_id.nil?
+      nil
+    else
+      Photo.find(avatar_id)
+    end
   end
 
   # Return all the photos other than the primary one
diff --git a/app/models/photo.rb b/app/models/photo.rb
index dd2e3939e99108f03d7f3e877dd5f178cb57eaef..328ea7fd3b41eee8295a2bf92381f8a46347bcac 100644
--- a/app/models/photo.rb
+++ b/app/models/photo.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: photos
 #
@@ -12,9 +12,11 @@
 #  size         :integer(11)     
 #  width        :integer(11)     
 #  height       :integer(11)     
-#  primary      :boolean(1)      
 #  created_at   :datetime        
 #  updated_at   :datetime        
+#  gallery_id   :integer(11)     
+#  title        :string(255)     
+#  position     :integer(11)     
 #
 
 class Photo < ActiveRecord::Base
@@ -22,6 +24,7 @@ class Photo < ActiveRecord::Base
   UPLOAD_LIMIT = 5 # megabytes
   
   belongs_to :gallery, :counter_cache => true
+  acts_as_list :scope => :gallery_id
   belongs_to :person
   has_attachment :content_type => :image, 
                  :storage => :file_system, 
@@ -34,7 +37,12 @@ class Photo < ActiveRecord::Base
   
   has_many :activities, :foreign_key => "item_id", :dependent => :destroy
     
-  after_save :log_activity
+  validates_length_of :title, :maximum => 255, :allow_nil => true
+  after_create :log_activity
+  
+  def self.per_page
+    16
+  end
                  
   # Override the crappy default AttachmentFu error messages.
   def validate
@@ -56,7 +64,7 @@ class Photo < ActiveRecord::Base
   end
   
   def log_activity
-    if self.primary?
+    if self.parent.nil?
       activity = Activity.create!(:item => self, :person => self.person)
       add_activities(:activity => activity, :person => self.person)
     end
diff --git a/app/models/post.rb b/app/models/post.rb
index 0d0086acbc2c905cd64fe474ac5042945439ad86..18658f9eaea120f56d7d11b935fd5ba6f1135237 100644
--- a/app/models/post.rb
+++ b/app/models/post.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: posts
 #
diff --git a/app/models/preference.rb b/app/models/preference.rb
index 4309c0c4e42711ad6236f8d5498cbc7d69402fbd..614fc5aacdc90dec0ef71cef5221aa7f7620aa18 100644
--- a/app/models/preference.rb
+++ b/app/models/preference.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: preferences
 #
diff --git a/app/models/topic.rb b/app/models/topic.rb
index 8431db7f4ffef5255da3c881323fb036f0d33243..a3cf12e3458562ea7c5f7212960dc5db2596de01 100644
--- a/app/models/topic.rb
+++ b/app/models/topic.rb
@@ -1,5 +1,5 @@
 # == Schema Information
-# Schema version: 24
+# Schema version: 28
 #
 # Table name: topics
 #
diff --git a/app/views/galleries/_photo.html.erb b/app/views/galleries/_photo.html.erb
new file mode 100644
index 0000000000000000000000000000000000000000..91c31bcc6318e40c5749e856d3fb6ff2a5cf5388
--- /dev/null
+++ b/app/views/galleries/_photo.html.erb
@@ -0,0 +1 @@
+<%=link_to image_tag(photo.public_filename(:thumbnail)), photo_path(photo)%>
diff --git a/app/views/galleries/show.html.erb b/app/views/galleries/show.html.erb
index 30404ce4c54634bf430d2d154c10c45b8b1eebc1..5e736a6753b14ceeb160ada173c8eb733896134d 100644
--- a/app/views/galleries/show.html.erb
+++ b/app/views/galleries/show.html.erb
@@ -1 +1,29 @@
-TODO
\ No newline at end of file
+<%- column_div :type => :primary do -%>
+	<h2> Photos in <%= h(@gallery.title)%> </h2>
+	<table>
+		<% @photos.collect_every(N_COLUMNS) do |row| %>
+	  	<tr>		
+				<% row.each do |photo| %>
+	   			<td>
+						<%=render :partial=>"photo", :object=>photo%>
+					</td>
+				<% end %>
+			</tr>
+		<% end %>
+	</table>
+	<%= will_paginate(@photos) %>
+<%-end-%>
+
+<%- column_div :type => :secondary do -%>
+	<h2> Toolbox </h2>
+	<div class="toolbox">
+		<ul>
+			<% if current_person?(@gallery.person)%>
+				<li><%=link_to "Add photo", new_gallery_photo_path(@gallery)%></li>
+				<li><%=link_to "Edit gallery", edit_gallery_path()%> </li>
+			<% end %>
+			<li> <%=link_to "Go back to #{h(@gallery.person.name)}'s gallery list", person_galleries_path(@gallery.person)%> </li>
+		</ul>
+	</div>
+	<%= render :partial => 'shared/minifeed' %>
+<%- end-%>
\ No newline at end of file
diff --git a/app/views/people/edit.html.erb b/app/views/people/edit.html.erb
index f23878848863e8036415b4662b692529654b917b..56a5c71eb19e41c5993e6acc9d493c19568fc839 100644
--- a/app/views/people/edit.html.erb
+++ b/app/views/people/edit.html.erb
@@ -78,44 +78,6 @@
 
   <br />
 
-  <h3>Photos</h3>
-  
-    <% if @person.photos.empty? %>
-      <%= image_tag @person.thumbnail %>
-    <% else %>
-    <table>
-      <% @person.sorted_photos.collect_every(N_COLUMNS) do |row| %>
-      <tr>
-      <% row.each do |photo| %>
-        <td  style="padding-left: 1em;">
-          <%= image_tag photo.public_filename(:thumbnail) %>
-        </td>
-      <% end %>
-      </tr>
-      <tr>
-        <% row.each do |photo| %>
-        <td style="padding-left: 1em;">
-          <% if photo.primary? %>
-            primary
-          <% else %>
-            <%= link_to "select", photo_path(photo),
-                                          :method => :put %>
-          <% end %>
-          |
-          <%= link_to image_tag("icons/close.gif"), photo_path(photo),
-                                               :method => :delete %>
-        </td>
-        <% end %>
-      </tr>
-      <% end %>
-    </table>
-    <% end %>
-    <br />
-    <%= button_to "Add a photo", new_photo_path, :class => "button" %>
-  </div>
-
-  <br />
-
   <% form_for @person, :html => { :id => "change_password" } do |f| %>
 
     <h3>Change Password</h3>
@@ -143,6 +105,7 @@
     </div>
     <input type="hidden" name="type" value="password_edit" />
   <% end %>
+</div>
 <%- end -%>
 
 <%- column_div :type => :secondary do -%>
diff --git a/app/views/photos/index.html.erb b/app/views/photos/index.html.erb
deleted file mode 100644
index 89b8c87adcfdd3b287b0dcd8eb22e94df745abec..0000000000000000000000000000000000000000
--- a/app/views/photos/index.html.erb
+++ /dev/null
@@ -1,7 +0,0 @@
-<% unless @photos.empty? %>
-<ul style="list-style-type: none;">
-<% @photos.each do |photo| %>
-  <li><%= image_tag(photo.public_filename) %></li>
-<% end %>
-</ul>
-<% end %>
\ No newline at end of file
diff --git a/app/views/photos/new.html.erb b/app/views/photos/new.html.erb
index 39d900e8de3f9868a996cb96bd8ebe207f2a6c17..4ce845675bc717a5d44879239c92dc7061773755 100644
--- a/app/views/photos/new.html.erb
+++ b/app/views/photos/new.html.erb
@@ -1,8 +1,12 @@
 <h2>Profile photo upload</h2>
 <%= error_messages_for :photo %>
 
-<% form_for @photo, :html => { :multipart => true } do |f| -%>
+<% form_for @photo,:url=>{:controller => :photos, :action => :create, :gallery_id => @gallery}, :html => { :multipart => true } do |f| -%>
 
+	<div class="form_field">
+    <label for="photo">Title:</label>
+    <%= f.text_field :title %>
+  </div>
   <div class="form_field">
     <label for="photo">Upload a photo:</label>
     <%= f.file_field :uploaded_data %>
diff --git a/app/views/photos/show.html.erb b/app/views/photos/show.html.erb
new file mode 100644
index 0000000000000000000000000000000000000000..96db988f1204d789b798e4011d3464934bc7f126
--- /dev/null
+++ b/app/views/photos/show.html.erb
@@ -0,0 +1,27 @@
+<%- column_div :type => :primary do -%>
+	<% if !@photo.title.nil?%>
+		<h2> <%= h(@photo.title)%></h2>
+	<% end %>
+	<div class="photo-navigation">
+		<% if !@photo.first? %>
+			<%= link_to h("<<Previous"), photo_path(@photo.higher_item)%>
+		<% end %>
+		<% if !@photo.last? %>
+			<%= link_to h("Next>>"), photo_path(@photo.lower_item) %>
+		<% end %>
+	</div>
+	<%= image_tag(@photo.public_filename) %>
+	
+<% end %>
+
+<%- column_div :type => :secondary do -%>
+	<h2> Toolbox </h2>
+	<div class="toolbox">
+		<ul>
+			<li><%=link_to "Go back to gallery", gallery_path(@photo.gallery)%></li>
+		</ul>
+	</div>
+	<%= render :partial => 'shared/minifeed' %>
+<%- end-%>
+	
+	
\ No newline at end of file
diff --git a/db/migrate/026_add_gallery_to_photos.rb b/db/migrate/026_add_gallery_to_photos.rb
index 3fa7e70c82139641712791fe1fd3e77de101ff95..45b1090d64cf1558947e4a6fa0b9ea3041d579db 100644
--- a/db/migrate/026_add_gallery_to_photos.rb
+++ b/db/migrate/026_add_gallery_to_photos.rb
@@ -1,9 +1,13 @@
 class AddGalleryToPhotos < ActiveRecord::Migration
   def self.up
     add_column :photos, :gallery_id, :integer
+    add_column :photos, :title, :string
+    remove_column :photos, :primary
   end
 
   def self.down
     remove_column :photos, :gallery_id
+    remove_column :photos, :title
+    add_column :phots, :primary
   end
 end
diff --git a/db/migrate/027_modify_person_primary_photo.rb b/db/migrate/027_modify_person_primary_photo.rb
new file mode 100644
index 0000000000000000000000000000000000000000..3a7de2886ec41ac99c08e6da1bb7c5f9164c8583
--- /dev/null
+++ b/db/migrate/027_modify_person_primary_photo.rb
@@ -0,0 +1,9 @@
+class ModifyPersonPrimaryPhoto < ActiveRecord::Migration
+  def self.up
+    add_column :people, :avatar_id, :integer
+  end
+
+  def self.down
+    remove_column :people, :avatar_id
+  end
+end
diff --git a/db/migrate/028_add_list_capabilityto_photos.rb b/db/migrate/028_add_list_capabilityto_photos.rb
new file mode 100644
index 0000000000000000000000000000000000000000..bf55b58cc1289e22878bc2ecd9e4632f45bbe30b
--- /dev/null
+++ b/db/migrate/028_add_list_capabilityto_photos.rb
@@ -0,0 +1,9 @@
+class AddListCapabilitytoPhotos < ActiveRecord::Migration
+  def self.up
+    add_column :photos, :position, :integer
+  end
+
+  def self.down
+    remove_column :photos, :position
+  end
+end
diff --git a/spec/controllers/photos_controller_spec.rb b/spec/controllers/photos_controller_spec.rb
index 17b30e882d7e4881becaed42e9f248bed6be34c6..06a17b2a6d97d62d3c44a3734db14a660eafa63d 100644
--- a/spec/controllers/photos_controller_spec.rb
+++ b/spec/controllers/photos_controller_spec.rb
@@ -20,19 +20,20 @@ describe PhotosController do
       photos.each { |p| p.stub!(:person).and_return(@person) }
       @photo = @primary
       @person.stub!(:photos).and_return([@primary, @secondary])
+      @gallery = galleries(:valid_gallery)
     end
   
-    it "should have an index page" do
-      get :index
-      response.should be_success
-      response.should render_template("index")
-    end
     
     it "should have a new photo page" do
-      get :new
+      get :new, :gallery_id => @gallery
       response.should be_success
       response.should render_template("new")
     end
+    
+    it "should not have a new photo page without given gallery id" do
+      get :new
+      response.should_not be_success
+    end
 
     it "should have an edit photo page" do
       Photo.should_receive(:find).and_return(@photo)
@@ -43,10 +44,9 @@ describe PhotosController do
     
     it "should create photo" do
       image = uploaded_file("rails.png")
-      num_thumbnails = 3
       lambda do
-        post :create, :photo => { :uploaded_data => image }
-      end.should change(Photo, :count).by(num_thumbnails + 1)
+        post :create, :photo => { :uploaded_data => image, :gallery_id => @gallery }
+      end.should change(@gallery, :photos_count).by(1)
     end
     
     it "should handle empty photo upload" do
diff --git a/spec/models/photo_spec.rb b/spec/models/photo_spec.rb
index 3119e82cb3ba0204aa055969bf556ed7f1643b38..ba1323f048ce63a76f95fdd79eb2159ca71ba1ac 100644
--- a/spec/models/photo_spec.rb
+++ b/spec/models/photo_spec.rb
@@ -5,6 +5,7 @@ describe Photo do
   before(:each) do
     @filename = "rails.png"
     @person = people(:quentin)
+    @gallery = galleries(:valid_gallery)
     @image = uploaded_file(@filename, "image/png")
   end
   
@@ -12,13 +13,13 @@ describe Photo do
     new_photo.should be_valid
   end
   
-  it "should be able to make a primary photo" do
-    new_photo(:primary => true).should be_primary
-  end
-  
-  it "should be able to make a non-primary photo" do
-    new_photo(:primary => false).should_not be_primary    
-  end
+  # it "should be able to make a primary photo" do
+  #   new_photo(:primary => true).should be_primary
+  # end
+  # 
+  # it "should be able to make a non-primary photo" do
+  #   new_photo(:primary => false).should_not be_primary    
+  # end
   
   
   it "should have an associated person" do
@@ -36,6 +37,7 @@ describe Photo do
   
     def new_photo(options = {})
       Photo.new({ :uploaded_data => @image,
-                  :person        => @person }.merge(options))
+                  :person        => @person,
+                  :gallery       => @gallery }.merge(options))
     end
 end
\ No newline at end of file
diff --git a/vendor/plugins/acts_as_list/README b/vendor/plugins/acts_as_list/README
new file mode 100644
index 0000000000000000000000000000000000000000..36ae3188ea88d3ca48e7c8ceb4362ec6624c6821
--- /dev/null
+++ b/vendor/plugins/acts_as_list/README
@@ -0,0 +1,23 @@
+ActsAsList
+==========
+
+This acts_as extension provides the capabilities for sorting and reordering a number of objects in a list. The class that has this specified needs to have a +position+ column defined as an integer on the mapped database table.
+
+
+Example
+=======
+
+  class TodoList < ActiveRecord::Base
+    has_many :todo_items, :order => "position"
+  end
+
+  class TodoItem < ActiveRecord::Base
+    belongs_to :todo_list
+    acts_as_list :scope => :todo_list
+  end
+
+  todo_list.first.move_to_bottom
+  todo_list.last.move_higher
+
+
+Copyright (c) 2007 David Heinemeier Hansson, released under the MIT license
\ No newline at end of file
diff --git a/vendor/plugins/acts_as_list/init.rb b/vendor/plugins/acts_as_list/init.rb
new file mode 100644
index 0000000000000000000000000000000000000000..eb87e8790140eb613ace8cec024f32b703ab19a0
--- /dev/null
+++ b/vendor/plugins/acts_as_list/init.rb
@@ -0,0 +1,3 @@
+$:.unshift "#{File.dirname(__FILE__)}/lib"
+require 'active_record/acts/list'
+ActiveRecord::Base.class_eval { include ActiveRecord::Acts::List }
diff --git a/vendor/plugins/acts_as_list/lib/active_record/acts/list.rb b/vendor/plugins/acts_as_list/lib/active_record/acts/list.rb
new file mode 100644
index 0000000000000000000000000000000000000000..00d86928dc298a36483dabaab14ff71c9070b1c6
--- /dev/null
+++ b/vendor/plugins/acts_as_list/lib/active_record/acts/list.rb
@@ -0,0 +1,256 @@
+module ActiveRecord
+  module Acts #:nodoc:
+    module List #:nodoc:
+      def self.included(base)
+        base.extend(ClassMethods)
+      end
+
+      # This +acts_as+ extension provides the capabilities for sorting and reordering a number of objects in a list.
+      # The class that has this specified needs to have a +position+ column defined as an integer on
+      # the mapped database table.
+      #
+      # Todo list example:
+      #
+      #   class TodoList < ActiveRecord::Base
+      #     has_many :todo_items, :order => "position"
+      #   end
+      #
+      #   class TodoItem < ActiveRecord::Base
+      #     belongs_to :todo_list
+      #     acts_as_list :scope => :todo_list
+      #   end
+      #
+      #   todo_list.first.move_to_bottom
+      #   todo_list.last.move_higher
+      module ClassMethods
+        # Configuration options are:
+        #
+        # * +column+ - specifies the column name to use for keeping the position integer (default: +position+)
+        # * +scope+ - restricts what is to be considered a list. Given a symbol, it'll attach <tt>_id</tt> 
+        #   (if it hasn't already been added) and use that as the foreign key restriction. It's also possible 
+        #   to give it an entire string that is interpolated if you need a tighter scope than just a foreign key.
+        #   Example: <tt>acts_as_list :scope => 'todo_list_id = #{todo_list_id} AND completed = 0'</tt>
+        def acts_as_list(options = {})
+          configuration = { :column => "position", :scope => "1 = 1" }
+          configuration.update(options) if options.is_a?(Hash)
+
+          configuration[:scope] = "#{configuration[:scope]}_id".intern if configuration[:scope].is_a?(Symbol) && configuration[:scope].to_s !~ /_id$/
+
+          if configuration[:scope].is_a?(Symbol)
+            scope_condition_method = %(
+              def scope_condition
+                if #{configuration[:scope].to_s}.nil?
+                  "#{configuration[:scope].to_s} IS NULL"
+                else
+                  "#{configuration[:scope].to_s} = \#{#{configuration[:scope].to_s}}"
+                end
+              end
+            )
+          else
+            scope_condition_method = "def scope_condition() \"#{configuration[:scope]}\" end"
+          end
+
+          class_eval <<-EOV
+            include ActiveRecord::Acts::List::InstanceMethods
+
+            def acts_as_list_class
+              ::#{self.name}
+            end
+
+            def position_column
+              '#{configuration[:column]}'
+            end
+
+            #{scope_condition_method}
+
+            before_destroy :remove_from_list
+            before_create  :add_to_list_bottom
+          EOV
+        end
+      end
+
+      # All the methods available to a record that has had <tt>acts_as_list</tt> specified. Each method works
+      # by assuming the object to be the item in the list, so <tt>chapter.move_lower</tt> would move that chapter
+      # lower in the list of all chapters. Likewise, <tt>chapter.first?</tt> would return +true+ if that chapter is
+      # the first in the list of all chapters.
+      module InstanceMethods
+        # Insert the item at the given position (defaults to the top position of 1).
+        def insert_at(position = 1)
+          insert_at_position(position)
+        end
+
+        # Swap positions with the next lower item, if one exists.
+        def move_lower
+          return unless lower_item
+
+          acts_as_list_class.transaction do
+            lower_item.decrement_position
+            increment_position
+          end
+        end
+
+        # Swap positions with the next higher item, if one exists.
+        def move_higher
+          return unless higher_item
+
+          acts_as_list_class.transaction do
+            higher_item.increment_position
+            decrement_position
+          end
+        end
+
+        # Move to the bottom of the list. If the item is already in the list, the items below it have their
+        # position adjusted accordingly.
+        def move_to_bottom
+          return unless in_list?
+          acts_as_list_class.transaction do
+            decrement_positions_on_lower_items
+            assume_bottom_position
+          end
+        end
+
+        # Move to the top of the list. If the item is already in the list, the items above it have their
+        # position adjusted accordingly.
+        def move_to_top
+          return unless in_list?
+          acts_as_list_class.transaction do
+            increment_positions_on_higher_items
+            assume_top_position
+          end
+        end
+
+        # Removes the item from the list.
+        def remove_from_list
+          if in_list?
+            decrement_positions_on_lower_items
+            update_attribute position_column, nil
+          end
+        end
+
+        # Increase the position of this item without adjusting the rest of the list.
+        def increment_position
+          return unless in_list?
+          update_attribute position_column, self.send(position_column).to_i + 1
+        end
+
+        # Decrease the position of this item without adjusting the rest of the list.
+        def decrement_position
+          return unless in_list?
+          update_attribute position_column, self.send(position_column).to_i - 1
+        end
+
+        # Return +true+ if this object is the first in the list.
+        def first?
+          return false unless in_list?
+          self.send(position_column) == 1
+        end
+
+        # Return +true+ if this object is the last in the list.
+        def last?
+          return false unless in_list?
+          self.send(position_column) == bottom_position_in_list
+        end
+
+        # Return the next higher item in the list.
+        def higher_item
+          return nil unless in_list?
+          acts_as_list_class.find(:first, :conditions =>
+            "#{scope_condition} AND #{position_column} = #{(send(position_column).to_i - 1).to_s}"
+          )
+        end
+
+        # Return the next lower item in the list.
+        def lower_item
+          return nil unless in_list?
+          acts_as_list_class.find(:first, :conditions =>
+            "#{scope_condition} AND #{position_column} = #{(send(position_column).to_i + 1).to_s}"
+          )
+        end
+
+        # Test if this record is in a list
+        def in_list?
+          !send(position_column).nil?
+        end
+
+        private
+          def add_to_list_top
+            increment_positions_on_all_items
+          end
+
+          def add_to_list_bottom
+            self[position_column] = bottom_position_in_list.to_i + 1
+          end
+
+          # Overwrite this method to define the scope of the list changes
+          def scope_condition() "1" end
+
+          # Returns the bottom position number in the list.
+          #   bottom_position_in_list    # => 2
+          def bottom_position_in_list(except = nil)
+            item = bottom_item(except)
+            item ? item.send(position_column) : 0
+          end
+
+          # Returns the bottom item
+          def bottom_item(except = nil)
+            conditions = scope_condition
+            conditions = "#{conditions} AND #{self.class.primary_key} != #{except.id}" if except
+            acts_as_list_class.find(:first, :conditions => conditions, :order => "#{position_column} DESC")
+          end
+
+          # Forces item to assume the bottom position in the list.
+          def assume_bottom_position
+            update_attribute(position_column, bottom_position_in_list(self).to_i + 1)
+          end
+
+          # Forces item to assume the top position in the list.
+          def assume_top_position
+            update_attribute(position_column, 1)
+          end
+
+          # This has the effect of moving all the higher items up one.
+          def decrement_positions_on_higher_items(position)
+            acts_as_list_class.update_all(
+              "#{position_column} = (#{position_column} - 1)", "#{scope_condition} AND #{position_column} <= #{position}"
+            )
+          end
+
+          # This has the effect of moving all the lower items up one.
+          def decrement_positions_on_lower_items
+            return unless in_list?
+            acts_as_list_class.update_all(
+              "#{position_column} = (#{position_column} - 1)", "#{scope_condition} AND #{position_column} > #{send(position_column).to_i}"
+            )
+          end
+
+          # This has the effect of moving all the higher items down one.
+          def increment_positions_on_higher_items
+            return unless in_list?
+            acts_as_list_class.update_all(
+              "#{position_column} = (#{position_column} + 1)", "#{scope_condition} AND #{position_column} < #{send(position_column).to_i}"
+            )
+          end
+
+          # This has the effect of moving all the lower items down one.
+          def increment_positions_on_lower_items(position)
+            acts_as_list_class.update_all(
+              "#{position_column} = (#{position_column} + 1)", "#{scope_condition} AND #{position_column} >= #{position}"
+           )
+          end
+
+          # Increments position (<tt>position_column</tt>) of all items in the list.
+          def increment_positions_on_all_items
+            acts_as_list_class.update_all(
+              "#{position_column} = (#{position_column} + 1)",  "#{scope_condition}"
+            )
+          end
+
+          def insert_at_position(position)
+            remove_from_list
+            increment_positions_on_lower_items(position)
+            self.update_attribute(position_column, position)
+          end
+      end 
+    end
+  end
+end
diff --git a/vendor/plugins/acts_as_list/test/list_test.rb b/vendor/plugins/acts_as_list/test/list_test.rb
new file mode 100644
index 0000000000000000000000000000000000000000..e89cb8e124c77ee9cb058e8d112bdcd23447f2cb
--- /dev/null
+++ b/vendor/plugins/acts_as_list/test/list_test.rb
@@ -0,0 +1,332 @@
+require 'test/unit'
+
+require 'rubygems'
+gem 'activerecord', '>= 1.15.4.7794'
+require 'active_record'
+
+require "#{File.dirname(__FILE__)}/../init"
+
+ActiveRecord::Base.establish_connection(:adapter => "sqlite3", :dbfile => ":memory:")
+
+def setup_db
+  ActiveRecord::Schema.define(:version => 1) do
+    create_table :mixins do |t|
+      t.column :pos, :integer
+      t.column :parent_id, :integer
+      t.column :created_at, :datetime      
+      t.column :updated_at, :datetime
+    end
+  end
+end
+
+def teardown_db
+  ActiveRecord::Base.connection.tables.each do |table|
+    ActiveRecord::Base.connection.drop_table(table)
+  end
+end
+
+class Mixin < ActiveRecord::Base
+end
+
+class ListMixin < Mixin
+  acts_as_list :column => "pos", :scope => :parent
+
+  def self.table_name() "mixins" end
+end
+
+class ListMixinSub1 < ListMixin
+end
+
+class ListMixinSub2 < ListMixin
+end
+
+class ListWithStringScopeMixin < ActiveRecord::Base
+  acts_as_list :column => "pos", :scope => 'parent_id = #{parent_id}'
+
+  def self.table_name() "mixins" end
+end
+
+
+class ListTest < Test::Unit::TestCase
+
+  def setup
+    setup_db
+    (1..4).each { |counter| ListMixin.create! :pos => counter, :parent_id => 5 }
+  end
+
+  def teardown
+    teardown_db
+  end
+
+  def test_reordering
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+
+    ListMixin.find(2).move_lower
+    assert_equal [1, 3, 2, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+
+    ListMixin.find(2).move_higher
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+
+    ListMixin.find(1).move_to_bottom
+    assert_equal [2, 3, 4, 1], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+
+    ListMixin.find(1).move_to_top
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+
+    ListMixin.find(2).move_to_bottom
+    assert_equal [1, 3, 4, 2], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+
+    ListMixin.find(4).move_to_top
+    assert_equal [4, 1, 3, 2], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+  end
+
+  def test_move_to_bottom_with_next_to_last_item
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+    ListMixin.find(3).move_to_bottom
+    assert_equal [1, 2, 4, 3], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+  end
+
+  def test_next_prev
+    assert_equal ListMixin.find(2), ListMixin.find(1).lower_item
+    assert_nil ListMixin.find(1).higher_item
+    assert_equal ListMixin.find(3), ListMixin.find(4).higher_item
+    assert_nil ListMixin.find(4).lower_item
+  end
+
+  def test_injection
+    item = ListMixin.new(:parent_id => 1)
+    assert_equal "parent_id = 1", item.scope_condition
+    assert_equal "pos", item.position_column
+  end
+
+  def test_insert
+    new = ListMixin.create(:parent_id => 20)
+    assert_equal 1, new.pos
+    assert new.first?
+    assert new.last?
+
+    new = ListMixin.create(:parent_id => 20)
+    assert_equal 2, new.pos
+    assert !new.first?
+    assert new.last?
+
+    new = ListMixin.create(:parent_id => 20)
+    assert_equal 3, new.pos
+    assert !new.first?
+    assert new.last?
+
+    new = ListMixin.create(:parent_id => 0)
+    assert_equal 1, new.pos
+    assert new.first?
+    assert new.last?
+  end
+
+  def test_insert_at
+    new = ListMixin.create(:parent_id => 20)
+    assert_equal 1, new.pos
+
+    new = ListMixin.create(:parent_id => 20)
+    assert_equal 2, new.pos
+
+    new = ListMixin.create(:parent_id => 20)
+    assert_equal 3, new.pos
+
+    new4 = ListMixin.create(:parent_id => 20)
+    assert_equal 4, new4.pos
+
+    new4.insert_at(3)
+    assert_equal 3, new4.pos
+
+    new.reload
+    assert_equal 4, new.pos
+
+    new.insert_at(2)
+    assert_equal 2, new.pos
+
+    new4.reload
+    assert_equal 4, new4.pos
+
+    new5 = ListMixin.create(:parent_id => 20)
+    assert_equal 5, new5.pos
+
+    new5.insert_at(1)
+    assert_equal 1, new5.pos
+
+    new4.reload
+    assert_equal 5, new4.pos
+  end
+
+  def test_delete_middle
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+
+    ListMixin.find(2).destroy
+
+    assert_equal [1, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+
+    assert_equal 1, ListMixin.find(1).pos
+    assert_equal 2, ListMixin.find(3).pos
+    assert_equal 3, ListMixin.find(4).pos
+
+    ListMixin.find(1).destroy
+
+    assert_equal [3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+
+    assert_equal 1, ListMixin.find(3).pos
+    assert_equal 2, ListMixin.find(4).pos
+  end
+
+  def test_with_string_based_scope
+    new = ListWithStringScopeMixin.create(:parent_id => 500)
+    assert_equal 1, new.pos
+    assert new.first?
+    assert new.last?
+  end
+
+  def test_nil_scope
+    new1, new2, new3 = ListMixin.create, ListMixin.create, ListMixin.create
+    new2.move_higher
+    assert_equal [new2, new1, new3], ListMixin.find(:all, :conditions => 'parent_id IS NULL', :order => 'pos')
+  end
+  
+  
+  def test_remove_from_list_should_then_fail_in_list? 
+    assert_equal true, ListMixin.find(1).in_list?
+    ListMixin.find(1).remove_from_list
+    assert_equal false, ListMixin.find(1).in_list?
+  end 
+  
+  def test_remove_from_list_should_set_position_to_nil 
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+  
+    ListMixin.find(2).remove_from_list 
+  
+    assert_equal [2, 1, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+  
+    assert_equal 1,   ListMixin.find(1).pos
+    assert_equal nil, ListMixin.find(2).pos
+    assert_equal 2,   ListMixin.find(3).pos
+    assert_equal 3,   ListMixin.find(4).pos
+  end 
+  
+  def test_remove_before_destroy_does_not_shift_lower_items_twice 
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+  
+    ListMixin.find(2).remove_from_list 
+    ListMixin.find(2).destroy 
+  
+    assert_equal [1, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5', :order => 'pos').map(&:id)
+  
+    assert_equal 1, ListMixin.find(1).pos
+    assert_equal 2, ListMixin.find(3).pos
+    assert_equal 3, ListMixin.find(4).pos
+  end 
+  
+end
+
+class ListSubTest < Test::Unit::TestCase
+
+  def setup
+    setup_db
+    (1..4).each { |i| ((i % 2 == 1) ? ListMixinSub1 : ListMixinSub2).create! :pos => i, :parent_id => 5000 }
+  end
+
+  def teardown
+    teardown_db
+  end
+
+  def test_reordering
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+
+    ListMixin.find(2).move_lower
+    assert_equal [1, 3, 2, 4], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+
+    ListMixin.find(2).move_higher
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+
+    ListMixin.find(1).move_to_bottom
+    assert_equal [2, 3, 4, 1], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+
+    ListMixin.find(1).move_to_top
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+
+    ListMixin.find(2).move_to_bottom
+    assert_equal [1, 3, 4, 2], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+
+    ListMixin.find(4).move_to_top
+    assert_equal [4, 1, 3, 2], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+  end
+
+  def test_move_to_bottom_with_next_to_last_item
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+    ListMixin.find(3).move_to_bottom
+    assert_equal [1, 2, 4, 3], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+  end
+
+  def test_next_prev
+    assert_equal ListMixin.find(2), ListMixin.find(1).lower_item
+    assert_nil ListMixin.find(1).higher_item
+    assert_equal ListMixin.find(3), ListMixin.find(4).higher_item
+    assert_nil ListMixin.find(4).lower_item
+  end
+
+  def test_injection
+    item = ListMixin.new("parent_id"=>1)
+    assert_equal "parent_id = 1", item.scope_condition
+    assert_equal "pos", item.position_column
+  end
+
+  def test_insert_at
+    new = ListMixin.create("parent_id" => 20)
+    assert_equal 1, new.pos
+
+    new = ListMixinSub1.create("parent_id" => 20)
+    assert_equal 2, new.pos
+
+    new = ListMixinSub2.create("parent_id" => 20)
+    assert_equal 3, new.pos
+
+    new4 = ListMixin.create("parent_id" => 20)
+    assert_equal 4, new4.pos
+
+    new4.insert_at(3)
+    assert_equal 3, new4.pos
+
+    new.reload
+    assert_equal 4, new.pos
+
+    new.insert_at(2)
+    assert_equal 2, new.pos
+
+    new4.reload
+    assert_equal 4, new4.pos
+
+    new5 = ListMixinSub1.create("parent_id" => 20)
+    assert_equal 5, new5.pos
+
+    new5.insert_at(1)
+    assert_equal 1, new5.pos
+
+    new4.reload
+    assert_equal 5, new4.pos
+  end
+
+  def test_delete_middle
+    assert_equal [1, 2, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+
+    ListMixin.find(2).destroy
+
+    assert_equal [1, 3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+
+    assert_equal 1, ListMixin.find(1).pos
+    assert_equal 2, ListMixin.find(3).pos
+    assert_equal 3, ListMixin.find(4).pos
+
+    ListMixin.find(1).destroy
+
+    assert_equal [3, 4], ListMixin.find(:all, :conditions => 'parent_id = 5000', :order => 'pos').map(&:id)
+
+    assert_equal 1, ListMixin.find(3).pos
+    assert_equal 2, ListMixin.find(4).pos
+  end
+
+end
-- 
1.5.3.7


